@page "/addBabyGiftView"
@page "/addBabyGiftView/{giftId}"

@using Microsoft.AspNetCore.Http.Extensions
@using asagiv.dbmanager.babythankyounotes
@using asagiv.dbmanager.webinterface.Data
@inject MainDbContextService dbContextService
@inject NavigationManager navManager

<h1>Baby Gift Detailsa</h1>

@if (babyGift == null)
{
    <p>Loading...</p>
}
else
{
    <EditForm Model="@babyGift" OnValidSubmit="onNewGiftValidSubmitAsync">

        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="input-group input-group-lg" style="margin:5px">
            <div class="input-group-prepend">
                <span style="width:200px" class="input-group-text" id="inputGroup-sizing-lg">Gift</span>
            </div>
            <input type="text" class="form-control" @bind-value="@babyGift.Gift">
        </div>

        @foreach (var selectedPerson in selectedPeople.Where(x => x != null).ToList())
        {
            <div class="input-group input-group-lg" style="margin:5px">
                <div class="input-group-prepend">
                    <span style="width:200px" class="input-group-text" id="inputGroup-sizing-lg">From</span>
                </div>
                <select type="text" class="form-control" @bind="@selectedPerson.value">
                    @foreach (var person in people)
                    {
                        <option>@person</option>
                    }
                </select>
            </div>
        }

        <div class="d-flex justify-content-center">
            <button type="button" class="btn btn-secondary" style="margin:5px" @onclick="addNewPerson">Add Person</button>
            <button type="button" class="btn btn-secondary" style="margin:5px" @onclick="removePerson">Remove Person</button>
            <button type="submit" class="btn btn-primary" style="margin:5px">Save Gift</button>
        </div>

    </EditForm>
}

@code {
    [Parameter]
    public string giftId { get; set; }

    private BabyGifts babyGift;
    private IList<string> people;
    private IList<SelectedListItem<string>> selectedPeople;

    protected override async Task OnInitializedAsync()
    {
        people = await dbContextService.getPeopleNamesAsync();
        people.Insert(0, "Select a person");
        selectedPeople = new List<SelectedListItem<string>>();

        if (string.IsNullOrWhiteSpace(giftId))
        {
            babyGift = new BabyGifts();
            selectedPeople.Add(new SelectedListItem<string>());
            return;
        }
        else
        {
            var giftIdNumber = long.Parse(giftId);
            babyGift = await dbContextService.getGiftFromIdAsync(giftIdNumber);

            var giftPeople = await dbContextService.getPeopleFromGift(babyGift);

            foreach (var person in giftPeople)
                selectedPeople.Add(new SelectedListItem<string> { value = person.ToString() });
        }
    }

    public async Task onNewGiftValidSubmitAsync()
    {
        await dbContextService.addGiftAsync(babyGift, selectedPeople.Select(x => x.value).ToList());
        navManager.NavigateTo("/babyGiftListView");
    }

    public void addNewPerson(MouseEventArgs e)
    {
        selectedPeople.Add(new SelectedListItem<string>());
    }

    public void removePerson(MouseEventArgs e)
    {
        if (selectedPeople.Count > 0)
            selectedPeople.RemoveAt(selectedPeople.Count - 1);
    }
}
