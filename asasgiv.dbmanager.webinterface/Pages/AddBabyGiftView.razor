@page "/addBabyGiftView"
@page "/addBabyGiftView/{giftId}"

@using Microsoft.AspNetCore.Http.Extensions
@using asagiv.dbmanager.addresses
@using asagiv.dbmanager.webinterface.Data
@inject MainDbContextService dbContextService
@inject NavigationManager navManager

<h1>Baby Gift Details</h1>

@if (babyGift == null)
{
    <p>Loading...</p>
}
else
{
    <EditForm Model="@babyGift" OnValidSubmit="onNewGiftValidSubmitAsync">

        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="input-group input-group-lg" style="margin:5px">
            <div class="input-group-prepend">
                <span style="width:200px" class="input-group-text" id="inputGroup-sizing-lg">Gift</span>
            </div>
            <input type="text" class="form-control" @bind-value="@babyGift.giftDescription">
        </div>

        @foreach (var selectedFamily in selectedFamilies.ToList())
        {
            <div class="input-group input-group-lg" style="margin:5px">
                <BlazoredTypeahead SearchMethod="findFamiliesAsync"
                                   EnableDropDown="true"
                                   ShowDropDownOnFocus="true"
                                   MaximumSuggestions="1000"
                                   @bind-Value="@selectedFamily.value"
                                   placeHolder="From">

                    <SelectedTemplate Context="family">
                        @family.family.ToString()
                    </SelectedTemplate>

                    <ResultTemplate Context="family">
                        @family.family.ToString()
                    </ResultTemplate>

                </BlazoredTypeahead>
            </div>
        }

        <div class="d-flex justify-content-center">
            <button type="button" class="btn btn-secondary" style="margin:5px" @onclick="addNewPerson">Add Person</button>
            <button type="button" class="btn btn-secondary" style="margin:5px" @onclick="removePerson">Remove Person</button>
            <button type="submit" class="btn btn-primary" style="margin:5px">Save Gift</button>
        </div>

    </EditForm>
}

@code {
    [Parameter]
    public string giftId { get; set; }

    private BabyGift babyGift;
    private IList<SelectedListItem<FamilyBabyGift>> selectedFamilies;
    private IList<FamilyBabyGift> familyBabyGiftList;

    protected override async Task OnInitializedAsync()
    {
        familyBabyGiftList = new List<FamilyBabyGift>();
        selectedFamilies = new List<SelectedListItem<FamilyBabyGift>>();

        if (string.IsNullOrWhiteSpace(giftId))
        {
            babyGift = new BabyGift();
            selectedFamilies.Add(new SelectedListItem<FamilyBabyGift>());
        }
        else
        {
            var giftIdNumber = long.Parse(giftId);
            babyGift = await dbContextService.getGiftFromIdAsync(giftIdNumber);

            var familyBabyGifts = await dbContextService.getPeopleFromGift(babyGift);

            foreach (var family in familyBabyGifts)
                selectedFamilies.Add(new SelectedListItem<FamilyBabyGift> { value = family });
        }
    }

    public async Task<IEnumerable<FamilyBabyGift>> findFamiliesAsync(string filterString)
    {
        var familyBabyGift = await dbContextService.filterFamiliesAsync(filterString);

        return familyBabyGift.Select(x => new FamilyBabyGift
        {
            family = x,
            babyGift = babyGift,
        });
    }

    public void addNewPerson(MouseEventArgs e)
    {
        selectedFamilies.Add(new SelectedListItem<FamilyBabyGift>());
    }

    public async Task onNewGiftValidSubmitAsync()
    {
        await dbContextService.addGiftAsync(babyGift, selectedFamilies.Select(x => x.value).ToList());
        navManager.NavigateTo("/babyGiftListView");
    }

    public void removePerson(MouseEventArgs e)
    {
        if (selectedFamilies.Count > 0)
            selectedFamilies.RemoveAt(selectedFamilies.Count - 1);
    }
}
