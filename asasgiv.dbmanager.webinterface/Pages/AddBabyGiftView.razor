@page "/addBabyGiftView"
@page "/addBabyGiftView/{giftId}"

@using Microsoft.AspNetCore.Http.Extensions
@using asagiv.dbmanager.addresses
@using asagiv.dbmanager.webinterface.Data
@inject MainDbContextService dbContextService
@inject NavigationManager navManager

@if (babyGift == null)
{
    <p>Loading...</p>
}
else
{
    <EditForm Model="@babyGift" OnValidSubmit="onNewGiftValidSubmitAsync">

        <DataAnnotationsValidator />
        <Microsoft.AspNetCore.Components.Forms.ValidationSummary />

        <Card Margin="Margin.Is1">
            <CardHeader>
                <Text>Gift</Text>
            </CardHeader>
            <CardBody>
                <TextEdit @bind-Text="@babyGift.giftDescription"></TextEdit>
            </CardBody>
        </Card>

        <div class="d-flex justify-content-center">
            <button type="button" class="btn btn-secondary" style="margin:5px" @onclick="addNewBenefactor">Add Benefactor</button>
            <button type="submit" class="btn btn-primary" style="margin:5px">Save Gift</button>
        </div>

        @foreach (var selectedFamily in selectedFamilies.ToList())
        {
            <Card Margin="Margin.Is1">
                <CardHeader>
                    <Row Class="d-flex justify-content-between">

                        <Text Class="align-self-center" Margin="Margin.Is3">From</Text>

                        <button type="button" class="btn btn-link" @onclick="@(() => removeBenefactor(selectedFamily))">
                            <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-trash" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                                <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z" />
                                <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z" />
                            </svg>
                        </button>

                    </Row>

                </CardHeader>
                <CardBody>

                    <BlazoredTypeahead SearchMethod="findFamiliesAsync"
                                       EnableDropDown="true"
                                       ShowDropDownOnFocus="true"
                                       MaximumSuggestions="1000"
                                       @bind-Value="@selectedFamily.value"
                                       placeHolder="From">

                        <SelectedTemplate Context="family">
                            @family.family.ToString()
                        </SelectedTemplate>

                        <ResultTemplate Context="family">
                            @family.family.ToString()
                        </ResultTemplate>

                    </BlazoredTypeahead>

                </CardBody>
            </Card>
        }

    </EditForm>
}

@code {
    [Parameter]
    public string giftId { get; set; }

    private BabyGift babyGift;
    private IList<SelectedListItem<FamilyBabyGift>> selectedFamilies;
    private IList<FamilyBabyGift> familyBabyGiftList;

    protected override async Task OnInitializedAsync()
    {
        familyBabyGiftList = new List<FamilyBabyGift>();
        selectedFamilies = new List<SelectedListItem<FamilyBabyGift>>();

        if (string.IsNullOrWhiteSpace(giftId))
        {
            babyGift = new BabyGift();
            selectedFamilies.Add(new SelectedListItem<FamilyBabyGift>());
        }
        else
        {
            var giftIdNumber = long.Parse(giftId);
            babyGift = await dbContextService.getGiftFromIdAsync(giftIdNumber);

            var familyBabyGifts = await dbContextService.getPeopleFromGift(babyGift);

            foreach (var family in familyBabyGifts)
                selectedFamilies.Add(new SelectedListItem<FamilyBabyGift> { value = family });
        }
    }

    public async Task<IEnumerable<FamilyBabyGift>> findFamiliesAsync(string filterString)
    {
        var familyBabyGift = await dbContextService.filterFamiliesAsync(filterString);

        return familyBabyGift.Select(x => new FamilyBabyGift
        {
            family = x,
            babyGift = babyGift,
        });
    }

    public void addNewBenefactor(MouseEventArgs e)
    {
        selectedFamilies.Add(new SelectedListItem<FamilyBabyGift>());
    }

    public async Task onNewGiftValidSubmitAsync()
    {
        await dbContextService.addGiftAsync(babyGift, selectedFamilies.Select(x => x.value).ToList());
        navManager.NavigateTo("/babyGiftListView");
    }

    public void removeBenefactor(SelectedListItem<FamilyBabyGift> familyBabyGift)
    {
        if (selectedFamilies.Count > 0)
            selectedFamilies.Remove(familyBabyGift);
    }
}
