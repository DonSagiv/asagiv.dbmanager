@page "/addPersonView"
@page "/addPersonView/{personId}"

@using asagiv.dbmanager.addresses
@using asagiv.dbmanager.webinterface.Data
@inject MainDbContextService dbContextService
@inject NavigationManager navManager

@if (family == null)
{
    <p>Loading...</p>
}
else
{
    <EditForm Model="@family" OnValidSubmit="onAddNewPersonClickAsync">

        <DataAnnotationsValidator />
        <Blazorise.ValidationSummary />

        <Card Margin="Margin.Is1">

            <CardHeader>
                <Text Class="align-self-center">
                    Family Information
                </Text>
            </CardHeader>

            <CardBody>

                <Field Margin="Margin.Is1">
                    <FieldLabel>Family Name</FieldLabel>
                    <TextEdit @bind-Text="@family.familyName" />
                </Field>

                <Field Margin="Margin.Is1">
                    <FieldLabel>Address Header</FieldLabel>
                    <TextEdit @bind-Text="@family.addressHeader" />
                </Field>

            </CardBody>

        </Card>

        <Row Class="d-flex justify-content-center">

            <Button Color="Color.Secondary" Clicked="@addNewMember" Margin="Margin.Is1">
                Add Family Member
            </Button>

            <Button Color="Color.Secondary" Clicked="@addNewAddress" Margin="Margin.Is1">
                Add Address
            </Button>

            <Button Type="ButtonType.Submit" Margin="Margin.Is1" Color="Color.Primary">
                Save Family
            </Button>

        </Row>


        @foreach (var member in family.familyMembers)
        {
            <Card Margin="Margin.Is1">

                <CardHeader>

                    <Row Class="d-flex justify-content-between">

                        <Text Class="align-self-center" Margin="Margin.Is3.FromLeft">
                            Family Member
                        </Text>

                        <button type="button" class="btn btn-link" @onclick="() => deleteMember(member)">
                            <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-trash" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                                <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z" />
                                <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z" />
                            </svg>
                        </button>

                    </Row>

                </CardHeader>

                <CardBody>

                    <Row>

                        <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                            <Field ColumnSize="ColumnSize.Is6.OnDesktop" Margin="Margin.Is1">
                                <FieldLabel>Name</FieldLabel>
                                <TextEdit @bind-Text="@member.personName" />
                            </Field>
                        </Column>

                        <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                            <Field Margin="Margin.Is1">
                                <FieldLabel>Date of Birth</FieldLabel>
                                <DateEdit @bind-Date="@member.dateOfBirth" />
                            </Field>
                        </Column>

                    </Row>

                </CardBody>

            </Card>
        }

        @foreach (var address in family.addresses)
        {
            <Card Margin="Margin.Is1">

                <CardHeader>

                    <Row Class="d-flex justify-content-between">

                        <Text Class="align-self-center" Margin="Margin.Is3.FromLeft">
                            Address
                        </Text>

                        <button type="button" class="btn btn-link" @onclick="() => deleteAddress(address)">
                            <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-trash" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                                <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z" />
                                <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z" />
                            </svg>
                        </button>

                    </Row>

                </CardHeader>

                <CardBody>

                    <Field Margin="Margin.Is1">
                        <FieldLabel>Street</FieldLabel>
                        <MemoEdit @bind-Text="@address.street" />
                    </Field>

                    <Field Margin="Margin.Is1">
                        <FieldLabel>City</FieldLabel>
                        <TextEdit @bind-Text="@address.city" />
                    </Field>

                    <Row>
                        <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                            <Field>
                                <FieldLabel>State</FieldLabel>
                                <TextEdit @bind-Text="@address.state" />
                            </Field>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is4.OnDesktop">
                            <Field>
                                <FieldLabel>Country</FieldLabel>
                                <TextEdit @bind-Text="@address.country" />
                            </Field>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is2.OnDesktop">
                            <Field>
                                <FieldLabel>Zip</FieldLabel>
                                <TextEdit @bind-Text="@address.zip" />
                            </Field>
                        </Column>
                    </Row>

                </CardBody>

            </Card>
        }

    </EditForm>
}

@code {
    [Parameter]
    public string personId { get; set; }

    private Family family;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrWhiteSpace(personId))
        {
            family = new Family();
            family.familyMembers.Add(new Person());
            family.addresses.Add(new Address());
        }
        else
        {
            var id = long.Parse(personId);
            family = await dbContextService.getFamilyFromIdAsync(id);
        }
    }

    public void addNewMember()
    {
        family.familyMembers.Add(new Person());
    }

    public void addNewAddress()
    {
        family.addresses.Add(new Address());
    }

    public void deleteMember(Person member)
    {
        family.familyMembers.Remove(member);
    }

    public void deleteAddress(Address addressToRemove)
    {
        family.addresses.Remove(addressToRemove);
    }

    public async Task onAddNewPersonClickAsync()
    {
        await dbContextService.saveFamilyAsync(family);
        navManager.NavigateTo("/peopleView");
    }
}
