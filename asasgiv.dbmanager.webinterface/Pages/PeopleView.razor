@page "/"
@page "/peopleView"

@using Microsoft.AspNetCore.Http.Extensions
@using asagiv.dbmanager.addresses
@using asagiv.dbmanager.webinterface.Data
@using asagiv.dbmanager.webinterface.ViewModels
@inject MainDbContextService dbContextService
@inject NavigationManager navManager
@inject IModalService modal

<div class="d-flex justify-content-center">
    <button type="button" class="btn btn-primary" style="margin:5px" @onclick="onAddNewPersonClick">Add New Person</button>
</div>

<div class="d-flex justify-content-center">

    <div class="input-group mb-4" style="max-width:400px;margin:5px">
        <input type="text" class="form-control" placeholder="Search User" aria-label="Search User" aria-describedby="searchField"
               @bind-value="@filterString"
               @bind-value:event="oninput"
               @onkeypress="@filterOnKeyPressed">
        <div class="input-group-append">
            <button class="btn btn-outline-secondary" type="button" id="searchField" @onclick="onSearchClicked">
                <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-search" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd" d="M10.442 10.442a1 1 0 0 1 1.415 0l3.85 3.85a1 1 0 0 1-1.414 1.415l-3.85-3.85a1 1 0 0 1 0-1.415z" />
                    <path fill-rule="evenodd" d="M6.5 12a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11zM13 6.5a6.5 6.5 0 1 1-13 0 6.5 6.5 0 0 1 13 0z" />
                </svg>
            </button>
        </div>
    </div>

</div>

@if (families == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <Accordion>
        @foreach (var familyVm in familyViewModels)
        {
            <Collapse Visible="@familyVm.isVisible">

                <CollapseHeader>
                    <Heading Size="HeadingSize.Is5">

                        <Row Class="d-flex justify-content-between">

                            <Button Clicked="@(() => onHeaderClicked(familyVm))">
                                @familyVm.family.addressHeader
                            </Button>

                            <div>

                                <button type="button" class="btn btn-link" @onclick="@(() => editPerson(familyVm.family))">
                                    <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-pencil" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                                        <path fill-rule="evenodd" d="M12.146.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1 0 .708l-10 10a.5.5 0 0 1-.168.11l-5 2a.5.5 0 0 1-.65-.65l2-5a.5.5 0 0 1 .11-.168l10-10zM11.207 2.5L13.5 4.793 14.793 3.5 12.5 1.207 11.207 2.5zm1.586 3L10.5 3.207 4 9.707V10h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.293l6.5-6.5zm-9.761 5.175l-.106.106-1.528 3.821 3.821-1.528.106-.106A.5.5 0 0 1 5 12.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.468-.325z" />
                                    </svg>
                                </button>

                                <button type="button" class="btn btn-link" @onclick="@(() => deletePersonAsync(familyVm.family))">
                                    <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-trash" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z" />
                                        <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z" />
                                    </svg>
                                </button>

                            </div>

                        </Row>

                    </Heading>
                </CollapseHeader>

                <CollapseBody>

                    @foreach (var address in familyVm.family.addresses)
                    {
                        @foreach (var line in address.ToString().Split('\n'))
                        {
                            <div>@line</div>
                        }
                        <br />
                    }

                    @foreach (var line in familyVm.getPeopleLines())
                    {
                        <div>@line</div>
                    }

                </CollapseBody>

            </Collapse>
        }
    </Accordion>
}

@code
{
    private IList<Family> families;
    private IList<FamilyViewModel> familyViewModels;
    public string filterString { get; set; }

    protected override async Task OnInitializedAsync()
    {
        families = await dbContextService.getFamiliesAsync();
        populateFamilies();
    }

    private void populateFamilies()
    {
        familyViewModels = families
            .Select(x => new FamilyViewModel(x))
            .ToList();
    }

    public void onHeaderClicked(FamilyViewModel familyVm)
    {
        foreach (var vm in familyViewModels.Where(x => x != familyVm))
            vm.isVisible = false;

        familyVm.isVisible = !familyVm.isVisible;
    }

    public void onAddNewPersonClick(MouseEventArgs e)
    {
        navManager.NavigateTo("/addPersonView");
    }

    public void editPerson(Family family)
    {
        navManager.NavigateTo($"addPersonView/{family.familyId}");
    }

    public async Task deletePersonAsync(Family family)
    {
        var parameters = new ModalParameters();
        parameters.Add("message", $"Are you sure you want to delete the {family.familyName} family?");

        var a = modal.Show<PromptModalDialog>("Delete Family", parameters);

        var result = await a.Result;

        if (result.Data == null || ((bool)result.Data) != true) return;

        await dbContextService.deleteFamilyAsync(family);

        await this.OnInitializedAsync();

        await Task.CompletedTask;
    }

    public async Task filterOnKeyPressed(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
            await onSearchClicked();
    }

    public async Task onSearchClicked()
    {
        if (string.IsNullOrWhiteSpace(filterString))
        {
            families = await dbContextService.getFamiliesAsync();
        }
        else
        {
            families = await dbContextService.filterFamiliesAsync(filterString);
        }

        populateFamilies();
    }
}
