@page "/events"

@using asagiv.dbmanager.common.Models
@using asagiv.dbmanager.webportal.Data
@inject NavigationManager NavManager
@inject AddressBookDbService AddressBookService

<PageTitle>Events</PageTitle>

<h1 class="text-center">Events</h1>

@if (_events == null)
{
    <Text>Loading...</Text>
}
else
{
    <Select TValue="EventInfo" SelectedValue="@_selectedEvent" SelectedValueChanged="OnSelectedEventChangedAsync">
    @foreach (var eventInfo in _events)
    {
        <SelectItem Value="eventInfo">@eventInfo.EventName</SelectItem>
    }
    </Select>

    <h2 class="text-center m-3">Gifts</h2>

    if (_selectedEvent != null && _familyEventGifts != null)
    {
        <div>

            <DataGrid TItem="FamilyEventGift" Data="@_familyEventGifts" Responsive PageSize="@_count">
                <DataGridCommandColumn />
                <DataGridColumn Field="Family.AddressHeader" HeaderTextAlignment="TextAlignment.Center" TextAlignment="TextAlignment.Center" Caption="From" Sortable="true" />
                <DataGridColumn Field="EventGift.GiftDescription" HeaderTextAlignment="TextAlignment.Center" TextAlignment="TextAlignment.Center" Caption="Gift" Sortable="true" />
                <DataGridCheckColumn Field="@nameof(FamilyEventGift.ThankYouNoteWritten)" HeaderTextAlignment="TextAlignment.Center" Caption="TY Written" Sortable="true">
                    <DisplayTemplate>
                        <div class="text-center">
                            <Check TValue="bool" Checked="@((context as FamilyEventGift).ThankYouNoteWritten)" CheckedChanged="(b => OnThankYouNoteWrittenChanged(context, b))" />
                        </div>
                    </DisplayTemplate>
                </DataGridCheckColumn>
                <DataGridCheckColumn HeaderTextAlignment="TextAlignment.Center" Caption="Options" Sortable="false">
                    <DisplayTemplate>
                        <div class="text-center">
                            <Button Padding="Padding.Is0">
                                <Icon Name="IconName.Edit" Margin="Margin.Is1.OnX" TextColor="TextColor.Primary" Clicked="(() => OnEditGiftClicked(context))" />
                            </Button>
                        </div>
                    </DisplayTemplate>
                </DataGridCheckColumn>
            </DataGrid>

        </div>
    }
}

@code {
    IList<EventInfo>? _events;
    private EventInfo? _selectedEvent;
    private IList<FamilyEventGift>? _familyEventGifts;
    private int _count;

    protected override async Task OnInitializedAsync()
    {
        _events = await AddressBookService.GetAllEventsAsync();

        await OnSelectedEventChangedAsync(_events.FirstOrDefault());
    }

    private async Task OnSelectedEventChangedAsync(EventInfo? selectedEvent)
    {
        _selectedEvent = selectedEvent;

        if (_selectedEvent == null)
        {
            _familyEventGifts = null;

            _count = 0;

            return;
        }

        _familyEventGifts = await AddressBookService.GetFamilyEventGiftsAsync(_selectedEvent);

        _count = _familyEventGifts.Count;
    }

    private async Task OnThankYouNoteWrittenChanged(object context, bool value)
    {
        var selectedFamilyEventGift = context as FamilyEventGift;

        if (selectedFamilyEventGift == null)
        {
            return;
        }

        selectedFamilyEventGift.ThankYouNoteWritten = value;

        await AddressBookService.UpdateThankYouNoteWrittenAsync(selectedFamilyEventGift);
    }

    public void OnEditGiftClicked(object context)
    {
        var selectedFamilyEventGift = context as FamilyEventGift;

        if (selectedFamilyEventGift == null)
        {
            return;
        }

        NavManager.NavigateTo($"events/{_selectedEvent?.Id}/gifts/{selectedFamilyEventGift?.GiftId}");
    }
}
