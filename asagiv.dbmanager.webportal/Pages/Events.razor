@page "/events"
@page "/events/{eventIdString}"

@using MongoDB.Bson
@using asagiv.dbmanager.common.Models
@using asagiv.dbmanager.webportal.Data
@inject NavigationManager NavManager
@inject AddressBookDbService AddressBookService

<PageTitle>Events</PageTitle>

<h1 class="text-center">Events</h1>

@if (_events == null)
{
    <Text>Loading...</Text>
}
else
{
    <Modal @ref="_eventNameModal">
        <ModalContent Centered>
            <ModalHeader>
                <ModalTitle>
                    Event Information
                </ModalTitle>
            </ModalHeader>
            <ModalBody>
                <Field>
                    <TextEdit @ref="_modalEventNameEdit" PlaceHolder="Event Name" />
                </Field>
                <Field>
                    <MemoEdit @ref="_modalEventDescriptionEdit" PlaceHolder="Description" />
                </Field>
                <Field>
                    <DateEdit TValue="DateTime?" @ref="_modalDateTimeEdit" />
                </Field>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="OnModalCancelClicked">Cancel</Button>
                <Button Color="Color.Primary" Clicked="OnModalOkClickedAsync">OK</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>

    <div class="text-center">
        <Button Color="Color.Primary" Clicked="AddNewEvent" Margin="Margin.Is3.OnY">Add New Event</Button>
    </div>

    <Select TValue="string" SelectedValue="@_selectedEvent" SelectedValueChanged="OnSelectedEventChangedAsync">
        <SelectItem TValue="string" Value="@string.Empty">--- Select an Event ---</SelectItem>
        @foreach (var eventInfo in _events)
    {
        <SelectItem TValue="string" Value="eventInfo.Id.ToString()">@eventInfo.EventName</SelectItem>
    }
</Select>

    if (_selectedEvent != null && _familyEventGifts != null)
    {
        <h2 class="text-center m-3">Gifts</h2>

        <div class="text-center">
            <Button Color="Color.Primary" Clicked="AddNewGift" Margin="Margin.Is3.OnY">Add New Gift</Button>
        </div>

        <div>

            <DataGrid TItem="FamilyEventGift" Data="@_familyEventGifts" Responsive PageSize="@_count">
                <DataGridCommandColumn />
                <DataGridColumn Field="Family.AddressHeader" HeaderTextAlignment="TextAlignment.Center" TextAlignment="TextAlignment.Center" Caption="From" Sortable="true" />
                <DataGridColumn Field="EventGift.GiftDescription" HeaderTextAlignment="TextAlignment.Center" TextAlignment="TextAlignment.Center" Caption="Gift" Sortable="true" />
                <DataGridCheckColumn Field="@nameof(FamilyEventGift.ThankYouNoteWritten)" HeaderTextAlignment="TextAlignment.Center" Caption="TY Written" Sortable="true">
                    <DisplayTemplate>
                        <div class="text-center">
                            <Check TValue="bool" Checked="@((context as FamilyEventGift).ThankYouNoteWritten)" CheckedChanged="(b => OnThankYouNoteWrittenChanged(context, b))" />
                        </div>
                    </DisplayTemplate>
                </DataGridCheckColumn>
                <DataGridCheckColumn HeaderTextAlignment="TextAlignment.Center" Caption="Options" Sortable="false">
                    <DisplayTemplate>
                        <div class="text-center">
                            <Button Padding="Padding.Is0">
                                <Icon Name="IconName.Edit" Margin="Margin.Is1.OnX" TextColor="TextColor.Primary" Clicked="(() => OnEditGiftClicked(context))" />
                            </Button>
                            <Button Padding="Padding.Is0">
                                <Icon Name="IconName.Delete" Margin="Margin.Is1.OnX" TextColor="TextColor.Primary" Clicked="(() => OnDeleteGiftClickedAsync(context))" />
                            </Button>
                        </div>
                    </DisplayTemplate>
                </DataGridCheckColumn>
            </DataGrid>

        </div>
    }
}

@code {
    [Parameter]
    public string eventIdString { get; set; }
    private Modal? _eventNameModal;
    private TextEdit? _modalEventNameEdit;
    private MemoEdit? _modalEventDescriptionEdit;
    private DateEdit<DateTime?>? _modalDateTimeEdit;
    IList<EventInfo>? _events;
    private string _selectedEvent;
    private IList<FamilyEventGift>? _familyEventGifts;
    private int _count;

    protected override async Task OnInitializedAsync()
    {
        _events = await AddressBookService.GetAllEventsAsync();

        if (eventIdString != null)
        {
            await OnSelectedEventChangedAsync(eventIdString);
        }
    }

    public void AddNewEvent()
    {
        _eventNameModal.Show();
    }

    public void AddNewGift()
    {
        NavManager.NavigateTo($"events/{_selectedEvent}/gifts/new");
    }

    public async Task OnModalOkClickedAsync()
    {
        var eventInfo = new EventInfo
            {
                EventName = _modalEventNameEdit.Text,
                EventDate = _modalDateTimeEdit.Date,
                Description = _modalEventDescriptionEdit.Text
            };

        await AddressBookService.AppendEventAsync(eventInfo);

        _events = await AddressBookService.GetAllEventsAsync();

        await OnSelectedEventChangedAsync(eventInfo.Id.ToString());

        await _eventNameModal.Hide();
    }

    public void OnModalCancelClicked()
    {
        _eventNameModal.Hide();
    }

    private async Task OnSelectedEventChangedAsync(string newInputObject)
    {
        if (string.IsNullOrWhiteSpace(newInputObject))
        {
            NavManager.NavigateTo($"/events");

            ClearEventData();
        }
        else
        {
            NavManager.NavigateTo($"/events/{newInputObject}");

            await LoadEventDataAsync(newInputObject);
        }
    }

    private void ClearEventData()
    {
        _familyEventGifts = null;

        _count = 0;
    }

    private async Task LoadEventDataAsync(string eventIdString)
    {
        _selectedEvent = eventIdString;

        if (!ObjectId.TryParse(_selectedEvent, out ObjectId eventId))
        {
            ClearEventData();

            return;
        }

        _familyEventGifts = await AddressBookService.GetFamilyEventGiftsAsync(eventId);

        _count = _familyEventGifts.Count;
    }

    private async Task OnThankYouNoteWrittenChanged(object context, bool value)
    {
        var selectedFamilyEventGift = context as FamilyEventGift;

        if (selectedFamilyEventGift == null)
        {
            return;
        }

        selectedFamilyEventGift.ThankYouNoteWritten = value;

        await AddressBookService.UpdateThankYouNoteWrittenAsync(selectedFamilyEventGift);
    }

    public async Task OnDeleteGiftClickedAsync(object context)
    {
        var selectedFamilyEventGift = context as FamilyEventGift;

        if(selectedFamilyEventGift == null)
        {
            return;
        }

        await AddressBookService.DeleteGiftAsync(selectedFamilyEventGift);

        await LoadEventDataAsync(_selectedEvent);
    }

    public void OnEditGiftClicked(object context)
    {
        var selectedFamilyEventGift = context as FamilyEventGift;

        if (selectedFamilyEventGift == null)
        {
            return;
        }

        NavManager.NavigateTo($"events/{_selectedEvent}/gifts/{selectedFamilyEventGift?.GiftId}");
    }
}
