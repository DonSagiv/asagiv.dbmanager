@page "/families/{Id}"

@using MongoDB.Bson
@using asagiv.dbmanager.common.Models
@using asagiv.dbmanager.webportal.Data
@inject NavigationManager NavManager
@inject AddressBookDbService AddressBookService


<PageTitle>Family Information</PageTitle>

<h1>Family Information</h1>

@if (_family == null)
{
    <div>
        <Text>Loading...</Text>
    </div>
}
else
{
    <div class="m-4">

        <Fields>

            <Field ColumnSize="ColumnSize.Is4">
                <FieldLabel>Family Name</FieldLabel>
                <TextEdit Size="Size.ExtraLarge" @bind-Text="@_family.FamilyName" />
            </Field>

            <Field ColumnSize="ColumnSize.Is8">
                <FieldLabel>Family Address Header</FieldLabel>
                <TextEdit Size="Size.ExtraLarge" @bind-Text="@_family.AddressHeader" />
            </Field>

        </Fields>

        <Button Color="Color.Secondary" Clicked="OnAddAddressClicked" Margin="Margin.Is3.OnY">Add Address</Button>

        @foreach (var address in _family.Addresses)
        {
            <Divider />

            <Field>
                <FieldLabel>Street</FieldLabel>
                <MemoEdit @bind-Text="@address.Street" AutoSize />
            </Field>

            <Fields>

                <Field ColumnSize="ColumnSize.Is4">
                    <FieldLabel>City</FieldLabel>
                    <TextEdit TextOverflow="TextOverflow.Wrap" @bind-Text="@address.City" />
                </Field>

                <Field ColumnSize="ColumnSize.Is3">
                    <FieldLabel>State</FieldLabel>
                    <TextEdit @bind-Text="@address.State" />
                </Field>

                <Field ColumnSize="ColumnSize.Is2">
                    <FieldLabel>Zip</FieldLabel>
                    <TextEdit @bind-Text="@address.Zip" />
                </Field>

                <Field ColumnSize="ColumnSize.Is3">
                    <FieldLabel>Country</FieldLabel>
                    <TextEdit @bind-Text="@address.Country" />
                </Field>

            </Fields>

            <Button Color="Color.Secondary" Margin="Margin.Is3.OnY" Clicked="@(_ => OnDeleteAddressClicked(address))">Delete Address</Button>

            <Divider />
        }

        <div>
            <Button Color="Color.Primary" Margin="Margin.Is3.OnY" Clicked="OnSaveClickedAsync">Save</Button>
        </div>
    </div>
}

@code {
    [Parameter]
    public string? Id { get; set; }
    private Family? _family;

    protected override async Task OnInitializedAsync()
    {
        if (ObjectId.TryParse(Id, out var objectId))
        {
            _family = await AddressBookService.GetFamilyAsync(objectId);
        }
    }

    private void OnAddAddressClicked()
    {
        if (_family == null)
        {
            return;
        }

        _family.Addresses.Add(new asagiv.dbmanager.common.Models.Address());
    }

    private void OnDeleteAddressClicked(asagiv.dbmanager.common.Models.Address address)
    {
        if (_family == null)
        {
            return;
        }

        _family.Addresses.Remove(address);
    }

    private async Task OnSaveClickedAsync()
    {
        if (_family == null)
        {
            return;
        }

        await AddressBookService.SaveFamilyAsync(_family);

        NavManager.NavigateTo("");
    }
}
