@page "/"

@using MongoDB.Bson
@using asagiv.dbmanager.webportal.Data
@using asagiv.dbmanager.common.Models
@using System.Linq
@inject NavigationManager NavManager
@inject AddressBookDbService AddressBookService

<PageTitle>Address Book</PageTitle>

<h1 class="text-center">Address Book</h1>

<div>
    @if (_families == null)
    {
        <Text>Loading...</Text>
    }
    else
    {
        <div>
            @foreach (var familyChunk in _families.Chunk(3))
            {
                <CardDeck>
                    @foreach (var family in familyChunk)
                    {
                        <Card Margin="Margin.Is3.OnY" Style="background-color:lightgray">
                            <CardBody>
                                <CardTitle Weight="TextWeight.Bold" Size="4">
                                    <div>@family.AddressHeader</div>
                                </CardTitle>
                                @if (family.Addresses.FirstOrDefault() != null)
                                {
                                    <CardText>
                                        @foreach (var line in family.Addresses.First().GetLines())
                                        {
                                            <div>@line</div>
                                        }

                                        <div>

                                            <Button Clicked="@(_ => OnEditFamilyClickedAsync(family.Id))">
                                                <Icon Name="IconName.Edit" />
                                            </Button>

                                            <Button Clicked="@(_ => OnDeleteFamilyClicked(family))">
                                                <Icon Name="IconName.Delete" />
                                            </Button>

                                        </div>

                                    </CardText>
                                }
                            </CardBody>
                        </Card>
                    }
                </CardDeck>
            }
        </div>

        <Modal @ref="deleteFamilyModal">
            <ModalContent Centered="true">
                <ModalHeader>
                    Delete Family
                </ModalHeader>
                <ModalBody>
                    @($"Are you sure you want to delte {_familyToDelete?.FamilyName}?") 
                </ModalBody>
                <ModalFooter>
                    <Button Color="Color.Secondary" Clicked="DeleteFamilyAsync">Yes</Button>
                    <Button Color="Color.Secondary" Clicked="CloseDialog">No</Button>
                </ModalFooter>
            </ModalContent>
        </Modal>
    }
</div>

@code {
    private IList<Family>? _families;
    private Family? _familyToDelete;
    private Modal? deleteFamilyModal;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await RefreshFamiliesAsync();
    }

    private async Task RefreshFamiliesAsync()
    {
        var familyAwaiter = AddressBookService.GetAllFamiliesAsync();

        _families = await familyAwaiter.ToListAsync();
    }

    private Task OnEditFamilyClickedAsync(ObjectId familyId)
    {
        NavManager.NavigateTo($"families/{familyId.ToString()}");

        return Task.CompletedTask;
    }

    private void OnDeleteFamilyClicked(Family family)
    {
        _familyToDelete = family;

        deleteFamilyModal?.Show();
    }

    private async Task DeleteFamilyAsync(object obj)
    {
        if(_familyToDelete == null)
        {
            return;
        }

        deleteFamilyModal?.Hide();

        // await AddressBookService.DeleteFamilyAsync(_familyToDelete.Id);

        await RefreshFamiliesAsync();

        _familyToDelete = null;
    }

    public void CloseDialog(object obj)
    {
        deleteFamilyModal?.Hide();

        _familyToDelete = null;
    }
}
