@page "/events/{eventIdString}/gifts/{eventGiftIdString}"

@using MongoDB.Bson
@using asagiv.dbmanager.common.Models
@using asagiv.dbmanager.webportal.Data
@inject NavigationManager NavManager
@inject AddressBookDbService AddressBookService

<PageTitle>Gift Information</PageTitle>

@if (_eventGift == null || _families == null)
{
    <div>
        <Text>Loading...</Text>
    </div>
}
else
{
    <div class="m-4">

        <h1 class="text-center">Gift Information</h1>

        <CardDeck>
            <Card Style="background-color:lightgray" Margin="Margin.Is3.FromBottom">

                <Div Margin="Margin.Is3">
                    <Fields>
                        <Field Margin="Margin.Is4">
                            <FieldLabel>Gift Description</FieldLabel>
                            <TextEdit Size="Size.ExtraLarge" @bind-Text="@_eventGift.GiftDescription" />
                        </Field>
                    </Fields>

                    <Fields>
                        <Field Margin="Margin.Is4">
                            <FieldLabel>Notes</FieldLabel>
                            <MemoEdit @bind-Text="@_eventGift.Notes" />
                        </Field>
                    </Fields>

                </Div>

            </Card>
        </CardDeck>

        @if (_familyEventGifts == null)
        {
            <div>
                <Text>
                    Loading
                </Text>
            </div>
        }
        else
        {
            <h2 class="text-center m-3">Benfactors</h2>

            <div>
                <Button Color="Color.Secondary" Clicked="AddNewFamily" Margin="Margin.Is3.OnY">Add Benfactor</Button>
            </div>

            <div>
                @foreach (var familyEventGift in _familyEventGifts)
                {
                    <CardDeck>
                        <Card Style="background-color:lightgray" Margin="Margin.Is3.FromBottom">

                            <Div Margin="Margin.Is3">

                                <Autocomplete TItem="Family"
                                    TValue="string"
                                    Data="@_families"
                                    TextField="@((item) => item.AddressHeader)"
                                    ValueField="@((item) => item.Id.ToString())"
                                    Placeholder="Select Family"
                                    SelectedValue="@familyEventGift.Family?.Id.ToString()"
                                    SelectedValueChanged="(x => OnFamilyChanged(x?.ToString(), familyEventGift))"
                                    FreeTyping
                                    Filter="AutocompleteFilter.Contains">
                                    <NotFoundContent> Not found </NotFoundContent>
                                </Autocomplete>

                                <Button>
                                    <Icon Name="IconName.Delete" Margin="Margin.Is1.OnX" TextColor="TextColor.Primary" />
                                </Button>

                            </Div>

                        </Card>
                    </CardDeck>
                }
            </div>

            <Button Color="Color.Primary" Clicked="SaveEventGiftAsync" Margin="Margin.Is3.OnY">Save Event Gift</Button>
        }
    </div>
}

@code {
    [Parameter]
    public string? eventIdString { get; set; }
    [Parameter]
    public string? eventGiftIdString { get; set; }
    public ObjectId _eventId;
    private EventGift? _eventGift;
    private IList<FamilyEventGift>? _familyEventGifts;
    private IList<FamilyEventGift>? _removedFamilyEventGifts;
    private IList<Family>? _families;

    protected override async Task OnInitializedAsync()
    {
        _removedFamilyEventGifts = new List<FamilyEventGift>();

        var isEventValid = !ObjectId.TryParse(eventIdString, out _eventId);

        _families = await AddressBookService.GetAllFamiliesAsync().ToListAsync();

        if (eventGiftIdString == "new")
        {
            _eventGift = new EventGift();
            _familyEventGifts = new List<FamilyEventGift>();

            AddNewFamily();
        }
        else if (ObjectId.TryParse(eventGiftIdString, out var eventGiftId))
        {
            _eventGift = await AddressBookService.GetGiftAsync(eventGiftId);
            _familyEventGifts = await AddressBookService.GetFamilyEventGiftsAsync(_eventId, eventGiftId);
        }
    }

    public void AddNewFamily()
    {
        var newFamilyEventGift = new FamilyEventGift
            {
                Family = new Family(),
                EventId = _eventId,
                GiftId = _eventGift?.Id ?? ObjectId.Empty
            };

        _familyEventGifts?.Add(newFamilyEventGift);
    }

    public void OnFamilyChanged(string familyIdString, FamilyEventGift familyEventGift)
    {
        if (familyEventGift == null)
        {
            return;
        }

        if (!ObjectId.TryParse(familyIdString, out ObjectId familyId))
        {
            familyEventGift.Family = null;

            return;
        }

        var family = _families
            ?.FirstOrDefault(x => x.Id == familyId);

        familyEventGift.Family = family;
    }

    public async Task SaveEventGiftAsync()
    {
        await AddressBookService.SaveFamilyEventGiftAsync(_eventGift, _familyEventGifts, _removedFamilyEventGifts);

        NavManager.NavigateTo($"/events/{eventIdString}");
    }
}